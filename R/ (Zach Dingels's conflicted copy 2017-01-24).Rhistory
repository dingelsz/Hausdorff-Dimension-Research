dat = read.csv('../Data/data_for_100000_steps_1.csv')
dat
seq(1, 5)
10 ^ seq(1, 5)
10 ^ seq(1, 5)
10 ^ seq(1, 5) + 2
for (steps in 10 ^ seq(1, 5)) {
for (i in seq(1, 30))
print(steps, i)
}
for (steps in 10 ^ seq(1, 5)) {
for (i in seq(1, 30))
print(steps + i)
}
genFileName <- function(steps, i) {
return paste("data_for_", steps, "_steps_", i, ".csv")
}
genFileName <- function(steps, i) {
return(paste("data_for_", steps, "_steps_", i, ".csv"))
}
genFileName(10, 1)
genFileName <- function(steps, i) {
return(paste("data_for_", steps, "_steps_", i, ".csv"), sep = "")
}
genFileName(10, 1)
genFileName <- function(steps, i) {
return(paste0("data_for_", steps, "_steps_", i, ".csv"))
}
genFileName(10, 1)
genFileName <- function(steps, i) {
return(paste0("../Data/data_for_", steps, "_steps_", i, ".csv"))
}
data = list()
for (steps in 10 ^ seq(1, 5)) {
for (i in seq(1, 30))
data = c(data, read.csv(genFileName(steps, i)))
}
as.numeric(10 ^ seq(1, 5))
1e+01
10^1
10^2
1e+seq(1,5)
1e+01
1e+1
1e+2
1e+(seq(1,5))
10 * 10 * 1
10 * 10 * 2
exp
exp(10, 2)
exp(2, 10)
exp(10)
{1, 2}
[1,2]
c(1,2,3)
data = list()
for (steps in c(10, 100, 1000, 10000, 100000)) {
for (i in seq(1, 30))
data = c(data, read.csv(genFileName(steps, i)))
}
data = list()
for (steps in c(10, 100, 1000, 10000, 100000)) {
for (i in seq(1, 30))
print(steps)
data = c(data, read.csv(genFileName(steps, i)))
}
1e+1
1e+5
as.string(1e+5)
as.String(1e+5)
as.character(1e+5)
as.character(1e+5 + 0)
as.character(1e+5 + 1)
as.integer(1e+5)
data = list()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30))
print(steps)
data = c(data, read.csv(genFileName(steps, i)))
}
data
dim(data)
length(data)
names(data)
read.csv(genFileName(100, 3))
class(read.csv(genFileName(100, 3)))
walkData = list()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30))
walkData[[paste(steps, i)]] = read.csv(genFileName(steps, i))
}
walkData$`10 1`
walkData = list()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30))
csvData = read.csv(genFileName(steps, i))
names(csvData) = c("x", "y", "isFrontier")
walkData[[paste(steps, i)]] = read.csv(genFileName(steps, i))
}
names(walkData$`100 30`)
walkData = list()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30))
csvData = read.csv(genFileName(steps, i))
names(csvData) = c("x", "y", "isFrontier")
walkData[[paste(steps, i)]] = csvData
}
walkData$`100 30`$isFrontier
as.logical(walkData$`100 30`$isFrontier)
walkData = list()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30))
csvData = read.csv(genFileName(steps, i))
names(csvData) = c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
walkData[[paste(steps, i)]] = csvData
}
walkData$`10 30`$isFrontier
walkData$`10 01`$isFrontier
walkData$`10 1`$isFrontier
walkData = list()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30))
csvData = read.csv(genFileName(steps, i))
names(csvData) = c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
walkData$paste(steps, i) = csvData
}
walkData = list()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30))
csvData = read.csv(genFileName(steps, i))
names(csvData) = c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
walkData[[paste(steps, i)]] = csvData
}
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30)) {
csvData = read.csv(genFileName(steps, i))
names(csvData) = c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
print(paste(steps, i))
walkData[[paste(steps, i)]] = csvData
}
}
walkData <- list()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30)) {
csvData <- read.csv(genFileName(steps, i))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
listName <- print(paste(steps, i))
walkData[[listName]] = csvData
}
}
walkData$`10 5`$isFrontier
walkData$`10 6`$isFrontier
walkData$`10 7`$isFrontier
walkData$`10 6`
walkData$`10 1`
walkData$`10 2`
walkData$`10 3`
walkData$`10 4`
walkData$`10 5`
walkData$`10 6`
walkData <- list()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30)) {
csvData <- read.csv(genFileName(steps, i))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
csvData$numberOfSteps = steps
listName <- print(paste(steps, i))
walkData[[listName]] = csvData
}
}
walkData$`10 1`$numberOfSteps
plot(walkData$`100000 26`$numberOfSteps[0])
c(1,2,3)[0]
c(1,2,3)[1]
plot(walkData$`100000 26`$numberOfSteps[1], log(sum(walkData)))
plot(walkData$`100000 26`$numberOfSteps[1], log(sum(walkData$`100000 26`$isFrontier)))
walkData <- list()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30)) {
csvData <- read.csv(genFileName(steps, i))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
csvData$numberOfSteps = steps
plot(steps, sum(csvData$isFrontier), add=TRUE)
listName <- print(paste(steps, i))
walkData[[listName]] = csvData
}
}
warnings()
points(1, 2)
points(1, 2, add=TRUE)
points(100000, 3000, add=TRUE)
plot()
warnings()
plot()
dev.off
dev.off()
points(1,2,)
points(1,2)
plot.new()
points(1,2)
x <- c()
y <- c()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30)) {
csvData <- read.csv(genFileName(steps, i))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
csvData$numberOfSteps = steps
x <- c(x, steps)
y <- c(y, sum(csvData$isFrontier))
listName <- print(paste(steps, i))
walkData[[listName]] = csvData
}
}
x
y
plot(x, y)
plot(y~x)
plot(x~y)
plot(y~x)
lm(plot(y~x))
lm(y ~ x)
plot(log(x), log(y))
lm(log(y) ~ log(x))
10^1
10^0.9
10^0.99999
10^1.1111
10^1.1
csvData$isFrontier
length(csvData$isFrontier)
dim(csvData)
x <- c()
yFrontier <- c()
yArea <- c()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30)) {
csvData <- read.csv(genFileName(steps, i))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
x <- c(x, steps)
yFrontier <- c(yFrontier, sum(csvData$isFrontier))
yArea <- c(yArea, length(csvData$x))
}
}
plot(log(yArea) ~ log(x))
lm(log(yArea) ~ log(x))
lm(log(yFrontier) ~ log(x))
lm(log(yFrontier) ~ log(x))
lm(log(yArea) ~ log(x))
genFileName <- function(steps, i) {
return(paste0("../Data/data_for_", steps, "_steps_", i, ".csv"))
}
x <- c()
yFrontier <- c()
yArea <- c()
yDiameter <- c()
for (steps in as.integer(c(10, 100, 1000, 10000, 100000))) {
for (i in seq(1, 30)) {
csvData <- read.csv(genFileName(steps, i))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
x <- c(x, steps)
yFrontier <- c(yFrontier, sum(csvData$isFrontier))
yArea <- c(yArea, length(csvData$x))
}
}
lm(log(yFrontier) ~ log(x))
lm(log(yArea) ~ log(x))
plot(log(yArea) ~ log(x))
list.files('../Data/')
x <- c()
yFrontier <- c()
yArea <- c()
yDiameter <- c()
for (f in list.files('../Data/')) {
csvData <- read.csv(f)
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
x <- c(x, steps)
yFrontier <- c(yFrontier, sum(csvData$isFrontier))
yArea <- c(yArea, length(csvData$x))
}
x <- c()
yFrontier <- c()
yArea <- c()
yDiameter <- c()
for (f in list.files('../Data/')) {
csvData <- read.csv(paste0("../Data/", f))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
x <- c(x, steps)
yFrontier <- c(yFrontier, sum(csvData$isFrontier))
yArea <- c(yArea, length(csvData$x))
}
plot(log(yFrontier) ~ log(x))
x
x <- c()
yFrontier <- c()
yArea <- c()
yDiameter <- c()
for (f in list.files('../Data/')) {
csvData <- read.csv(paste0("../Data/", f))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
x <- c(x, length(csvData$x))
yFrontier <- c(yFrontier, sum(csvData$isFrontier))
yArea <- c(yArea, length(csvData$x))
}
plot(log(yFrontier) ~ log(x))
lm(log(yFrontier) ~ log(x))
lm(log(yArea) ~ log(x))
lm(log(yAarea) ~ log(x))
lm(log(yArea) ~ log(x))
f
f[10]
substr(f, 1, 10)
substr(f, 10, 10)
substr(f, 10, 1)
substr(f, 10, 12)
library(strngr)
library(stringr)
?grep
grep(_, f)
grep("_", f)
regexp("_", f)
regexpr("_", f)
?str_locate
str_locate_all(f, "_")
f
underscoreIndexes <- str_locate_all(f, "_")
underscoreIndexes[1]
class(underscoreIndexes)
underscoreIndexes[1][1]
underscoreIndexes[[1]
]
underscoreIndexes[1,]
underscoreIndexes[1,1]
underscoreIndexes[1]
underscoreIndexes[2]
underscoreIndexes[3]
str_locate(f, "_")
str_locate_all(f, "_")
as.list(str_locate_all(f, "_"))
as.list(str_locate_all(f, "_")[[1]])
str_locate_all(f, "_")[[1]]
str_locate_all(f, "_")[[1]][1]
str_locate_all(f, "_")[[1]][2]
steps = as.integer(substr(f, underscoreIndexes[2], underscoreIndexes[3]))
substr(f, underscoreIndexes[2], underscoreIndexes[3])
substr(f, underscoreIndexes[2], underscoreIndexes[3])
underscoreIndexes[2]
underscoreIndexes <- str_locate_all(f, "_")[[1]]
steps = as.integer(substr(f, underscoreIndexes[2], underscoreIndexes[3]))
steps
substr(f, underscoreIndexes[2], underscoreIndexes[3])
steps = as.integer(substr(f, underscoreIndexes[2] + 1, underscoreIndexes[3] - 1))
steps
library(stringr)
x <- c()
yFrontier <- c()
yArea <- c()
yDiameter <- c()
for (f in list.files('../Data/')) {
csvData <- read.csv(paste0("../Data/", f))
# Get the indexes of each _
underscoreIndexes <- str_locate_all(f, "_")[[1]]
# The number of steps is inside the 2nd and 3rd _. +1 and -1 to not include the _
steps = as.integer(substr(f, underscoreIndexes[2] + 1, underscoreIndexes[3] - 1))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
x <- c(x, length(csvData$x))
yFrontier <- c(yFrontier, sum(csvData$isFrontier))
yArea <- c(yArea, steps)
}
plot(log(yArea)~log(x))
plot(log(yFrontier)~log(x))
lm(log(yFrontier) ~ log(x))
lm(log(yArea) ~ log(x))
x <- c()
yFrontier <- c()
yArea <- c()
yDiameter <- c()
for (f in list.files('../Data/')) {
csvData <- read.csv(paste0("../Data/", f))
# Get the indexes of each _
underscoreIndexes <- str_locate_all(f, "_")[[1]]
# The number of steps is inside the 2nd and 3rd _. +1 and -1 to not include the _
steps = as.integer(substr(f, underscoreIndexes[2] + 1, underscoreIndexes[3] - 1))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
x <- c(x, length(csvData$x))
yFrontier <- c(yFrontier, sum(csvData$isFrontier))
yArea <- c(yArea, steps)
width = max(csvData$x) - min(csvData$x)
height = max(csvData$y) - min(csvData$y)
yDiameter <- c(yDiameter, sqrt(width^2 + height^2))
}
lm(log(yFrontier) ~ log(x))
lm(log(yArea) ~ log(x))
lm(log(yDiameter) ~ log(x))
plot(log(yDiameter) ~ log(x))
lm(log(yFrontier) ~ log(x))
lm(log(yFrontier) ~ log(x))
lm(log(yArea) ~ log(x))
lm(log(yDiameter) ~ log(x))
lm(log(yArea) ~ log(x))
lm(log(yDiameter) ~ log(x))
lm(log(yArea) ~ log(x))
lm(log(yDiameter) ~ log(x))
lm(log(yArea) ~ log(x))
x <- c()
yFrontier <- c()
yArea <- c()
yDiameter <- c()
for (f in list.files('../Data/')) {
csvData <- read.csv(paste0("../Data/", f))
# Get the indexes of each _
underscoreIndexes <- str_locate_all(f, "_")[[1]]
# The number of steps is inside the 2nd and 3rd _. +1 and -1 to not include the _
steps = as.integer(substr(f, underscoreIndexes[2] + 1, underscoreIndexes[3] - 1))
names(csvData) <- c("x", "y", "isFrontier")
csvData$isFrontier = as.logical(csvData$isFrontier)
x <- c(x, steps)
yFrontier <- c(yFrontier, sum(csvData$isFrontier))
yArea <- c(yArea, length(csvData$x))
width = max(csvData$x) - min(csvData$x)
height = max(csvData$y) - min(csvData$y)
yDiameter <- c(yDiameter, sqrt(width^2 + height^2))
}
lm(log(yArea) ~ log(x))
lm(log(yFrontier) ~ log(x))
lm(log(yDiameter) ~ log(x))
lm(log(yFrontier) ~ log(x))
lm(log(yArea) ~ log(x))
lm(log(yDiameter) ~ log(x))
log(4) / log(3)
lm(log(yFrontier) ~ log(x))
plot(log(yFrontier) ~ log(x))
